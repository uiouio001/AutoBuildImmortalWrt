# 此工作流99% 使用luci 24.10.x 来构建 极个别机型使用快照版和23.05.4版本来构建
# 23.05.4 特有机型列表
# cmcc_rax3000m-emmc-ubootmod
# cmcc_rax3000m-nand-ubootmod

name: Build Wireless Router ImmortalWrt 24.10.x

on:
  workflow_dispatch:
    inputs:
      profile:
        type: choice
        description: "请选择mtk路由器型号(cmcc_rax3000m在24.10.2不区分emmc和nand版本)"
        required: true
        options:
          - cmcc_rax3000m
          - cmcc_rax3000m-emmc-ubootmod
          - cmcc_rax3000m-nand-ubootmod
          - cmcc_rax3000me
        default: cmcc_rax3000m
      custom_router_ip:
        description: "请设置路由器的管理地址 格式:192.168.x.1 或 10.x.x.1"
        required: true
        default: "192.168.6.1"
      enable_store:
        description: "是否集成 iStore 商店"
        required: false
        type: boolean
        default: true
      include_docker:
        description: "是否编译 Docker 插件"
        required: true
        default: true
        type: boolean
      USE_XR30_LED_DTS:
        description: "是否使用XR30 Led配置文件"
        required: true
        default: false
        type: boolean
      WIFI_DRIVER_VERSION:
        description: "选择WiFi驱动版本"
        required: true
        default: 'v7.6.7.2-fw-20240823(recommend)'
        type: choice
        options:
        - v7.6.7.2-fw-20240823(recommend)
        - v7.6.6.1-fw-20230306(recommend)
        - v7.6.7.2-fw-default
        - v7.6.7.2-fw-20230306
        - v7.6.7.2-fw-20230330
        - v7.6.7.2-fw-20230411
        - v7.6.7.2-fw-20230717
        - v7.6.7.2-fw-20231024
        - v7.6.6.1-fw-default
        - v7.6.6.1-fw-20230330
        - v7.6.6.1-fw-20230411
        - v7.6.6.1-fw-20230717
        - v7.6.6.1-fw-20231024
        - v7.6.6.1-fw-20240823
      USE_NX30PRO_EEPROM:
        description: "使用nx30pro高功能eeprom提高信号强度"
        required: true
        default: false
        type: boolean
      SSH_TO_GITHUB_ACTIONS:
        description: "SSH connection to Actions"
        required: false
        default: false
        type: boolean
      enable_pppoe:
        description: "是否配置PPPoE拨号信息?"
        required: true
        default: false
        type: boolean
      pppoe_account:
        description: "宽带账号 (若启用PPPoE)"
        required: false
      pppoe_password:
        description: "宽带密码 (若启用PPPoE)"
        required: false


jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      actions: write
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set executable permissions
        run: |
          chmod +x ${{ github.workspace }}/mediatek-filogic/build24.sh
      
      - name: Save Custom Router IP into OpenWrt files
        run: |
          mkdir -p "${{ github.workspace }}/custom"
          echo "${{ github.event.inputs.custom_router_ip }}" > "${{ github.workspace }}/custom/custom_router_ip.txt"
          echo "您设置的路由器管理地址是:${{ github.event.inputs.custom_router_ip }}"
          # 后续步骤会将该文件映射到路由器/etc/config/custom_router_ip.txt 以便用于开机脚本99-custom.sh读取用户设置的ip


      - name: Validate PPPoE Inputs
        if: github.event.inputs.enable_pppoe == 'true'
        run: |
          if [[ -z "${{ github.event.inputs.pppoe_account }}" || -z "${{ github.event.inputs.pppoe_password }}" ]]; then
            echo "Error: PPPoE account and password must be provided when PPPoE is enabled!"
            exit 1
          fi
      
      - name: Enable Store integration
        if: github.event.inputs.enable_store == 'true'
        run: |
          echo 'CUSTOM_PACKAGES="$CUSTOM_PACKAGES luci-app-store"' >> shell/custom-packages.sh
          echo "✅ 已追加 luci-app-store"
      
      - name: Set Use XR30 LED DTS file
        if: github.event.inputs.USE_XR30_LED_DTS == 'true'
        run: |
          echo "✅ 设置使用XR30的Led配置文件"
      
      - name: Set WiFi Driver Version

        run: |
          driver_version=$(echo "${{ github.event.inputs.WIFI_DRIVER_VERSION }}" | sed -E 's/^(v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          driver_firmware=$(echo "${{ github.event.inputs.WIFI_DRIVER_VERSION }}" | sed -E 's/.*fw-([0-9]{8}|default).*/\1/g')
          echo "wifi_driver_version=$driver_version" >> $GITHUB_ENV
          echo "wifi_driver_firmware=$driver_firmware" >> $GITHUB_ENV
          echo "✅ 您选择的WiFi驱动版本是: $driver_version-fw-$driver_firmware"
 
      - name: Use nx30pro eeprom and fixed WiFi MAC address
        run: |
          if [ "${{ github.event.inputs.USE_NX30PRO_EEPROM }}" == "true" ]; then
            echo "✅ 使用nx30pro的高功率eeprom(2.4G是23dBm、5G是22dBm)"
          else
            echo "❎ 使用默认功率eeprom(2.4G是25dBm、5G是24dBm)"
          fi
      
      - name: Build Wireless ImmortalWrt 24.10.2
        id: compile
        run: |
          # 默认平台
          echo "platform=mediatek/filogic" >> $GITHUB_ENV

          # 默认分支
          tag=mediatek-filogic-openwrt-24.10.2
          branch=24.10.2

          # 判断机型
          echo "Building for profile: $profile"
          profile="${{ github.event.inputs.profile }}"
          case "$profile" in
              # 下列机型目前没有24.10 因此采用23.05.4分支来构建
              cmcc_rax3000m-emmc-ubootmod | \
              cmcc_rax3000m-nand-ubootmod)
                tag=mediatek-filogic-openwrt-23.05.4
                ls ${{ github.workspace }}/mediatek-filogic/
                cp ${{ github.workspace }}/mediatek-filogic/build23.sh ${{ github.workspace }}/mediatek-filogic/build24.sh
                ;;
              *)
          esac

          echo "repo_url=https://github.com/immortalwrt/immortalwrt" >> $GITHUB_ENV
          echo "repo_branch=$branch" >> $GITHUB_ENV
          
          docker run --rm -i \
            --user root \
            -v "${{ github.workspace }}/bin:/home/build/immortalwrt/bin" \
            -v "${{ github.workspace }}/mediatek-filogic/files/etc/uci-defaults:/home/build/immortalwrt/files/etc/uci-defaults" \
            -v "${{ github.workspace }}/mediatek-filogic/files/etc/config:/home/build/immortalwrt/files/etc/config" \
            -v "${{ github.workspace }}/arch/arch.conf:/home/build/immortalwrt/files/etc/opkg/arch.conf" \
            -v "${{ github.workspace }}/shell:/home/build/immortalwrt/shell" \
            -v "${{ github.workspace }}/mediatek-filogic/build24.sh:/home/build/immortalwrt/build.sh" \
            -e PROFILE=$profile \
            -e INCLUDE_DOCKER=${{ github.event.inputs.include_docker }} \
            -e USE_XR30_LED_DTS=${{ github.event.inputs.USE_XR30_LED_DTS }} \
            -e WIFI_DRIVER_VERSION=${{ env.wifi_driver_version }} \
            -e WIFI_DRIVER_FIRMWARE=${{ env.wifi_driver_firmware }} \
            -e USE_NX30PRO_EEPROM=${{ github.event.inputs.USE_NX30PRO_EEPROM }} \
            -e ENABLE_PPPOE=${{ github.event.inputs.enable_pppoe }} \
            -e PPPOE_ACCOUNT=${{ github.event.inputs.pppoe_account }} \
            -e PPPOE_PASSWORD=${{ github.event.inputs.pppoe_password }} \
          immortalwrt/imagebuilder:$tag /bin/bash /home/build/immortalwrt/build.sh

          echo "build_date=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT

      - name: 准备阶段：是否允许通过SSH 连接到 Github Actions
        if: github.event.inputs.SSH_TO_GITHUB_ACTIONS == 'true'
        uses: alan6288/ssh2actions@main
        with:
          mode: ngrok
        env:
          # After sign up on the https://ngrok.com
          # You can find this token here: https://dashboard.ngrok.com/auth/your-authtoken
          NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
          
          # ngrok server region [us, eu, au, ap, sa, jp, in] (optional, default: us)
          # You can find this server region here: https://ngrok.com/docs#global-locations
          NGROK_REGION: us
      
          # This password you will use when authorizing via SSH
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
      
      - name: Organize firmware files
        id: organize
        if: steps.compile.outputs.status == 'success' && !cancelled()
        run: | 
          #cd /home/build/immortalwrt/bin/targets/*/*
          #cd ${{ github.workspace }}/bin/targets/${{ env.platform }}/*
          cd ${{ github.workspace }}/bin/targets/*/*
          rm -rf *.buildinfo
          rm -rf *.compilejson
          rm -rf *.json
          rm -rf *.manifest
          rm -rf packages

          # 使用整理后的文件进行发布，代替${{ github.workspace }}/bin/targets/${{ env.platform }}/*
          echo "firmware_dir=$PWD" >> $GITHUB_ENV
          echo "status=success" >> $GITHUB_OUTPUT
      
      - name: Create release tag
        id: tag
        if: steps.organize.outputs.status == 'success' && !cancelled()
        run: |          
          touch ${{ github.workspace }}/release.txt
          echo "- 💻 CPU架构: aarch64_cortex-a53" >> release.txt
          echo "- 📂 使用源码：${{ env.repo_url }}" >> release.txt
          echo "- 🌳 使用分支：${{ env.repo_branch }}" >> release.txt
          echo "- ⏱️ 构建时间: ${{ env.build_date }}"" >> release.txt
          echo "- 🏠 登录地址: http://${{ github.event.inputs.custom_router_ip }} or http://immortalwrt.lan" >> release.txt
          echo "- 👤 用户名: root" >> release.txt
          echo "- 🔒 密码: none" >> release.txt
          echo "- 📒 说明: " >> release.txt
          if [ "${{ github.event.inputs.enable_store }}" == "true" ]; then
                  echo "- ✅ 已构建iStroe商店" >> release.txt
          else
                  echo "- ⚪️ 未构建iStroe商店" >> release.txt
          fi
          if [ "${{ github.event.inputs.include_docker }}" == "true" ]; then
                  echo "- ✅ 已构建Docker" >> release.txt
          else
                  echo "- ⚪️ 未构建Docker" >> release.txt
          fi

          echo "release_tag=${{ github.event.inputs.profile }}-$release_date" >> $GITHUB_OUTPUT
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: Upload ImmortalWrt as release assets
        uses: softprops/action-gh-release@v2.2.1
        if: steps.tag.outputs.status == 'success' && !cancelled()
        with:
          name: ImmortalWrt-Wireless
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: ${{ github.workspace }}/realease.txt
          files: ${{ env.firmware_dir }}/*
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
